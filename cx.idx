CXLIBVERSION	cx.html#CXLIBVERSION	cx : CXLIBVERSION	
cxstart	cx.html#cxstart	cx : cxstart	
NimCxError	cx.html#NimCxError	cx : NimCxError	
RpointInt	cx.html#RpointInt	cx : RpointInt	
RpointFloat	cx.html#RpointFloat	cx : RpointFloat	
Benchmarkres	cx.html#Benchmarkres	cx : Benchmarkres	
benchmarkresults	cx.html#benchmarkresults	cx : benchmarkresults	
CxTimer	cx.html#CxTimer	cx : CxTimer	
Cxtimerres	cx.html#Cxtimerres	cx : Cxtimerres	
cxtimerresults	cx.html#cxtimerresults	cx : cxtimerresults	
Cxcounter	cx.html#Cxcounter	cx : Cxcounter	
newCxcounter	cx.html#newCxcounter,	cx : newCxcounter(): ref (Cxcounter)	
add	cx.html#add,ref.Cxcounter	cx : add(co: ref Cxcounter)	
dec	cx.html#dec,ref.Cxcounter	cx : dec(co: ref Cxcounter)	
reset	cx.html#reset,ref.Cxcounter	cx : reset(co: ref Cxcounter)	
rndSample	cx.html#rndSample,seq[T]	cx : rndSample[T](asq: seq[T]): T	
rndRGB	cx.html#rndRGB,	cx : rndRGB(): auto	
`[]`	cx.html#[],seq[T],Slice[U]	cx : `[]`[T; U](a: seq[T]; x: Slice[U]): seq[T]	
sampleSeq	cx.html#sampleSeq,seq[T],int,int	cx : sampleSeq[T](x: seq[T]; a: int; b: int): seq[T]	
cxtoLower	cx.html#cxtoLower,char	cx : cxtoLower(c: char): char	
stripper	cx.html#stripper,string	cx : stripper(str: string): string	
loopy	cx.html#loopy.t,T,untyped	cx : loopy[T](ite: T; st: untyped)	
loopy2	cx.html#loopy2.t,int,int,untyped	cx : loopy2(mi: int = 0; ma: int = 5; st: untyped)	
now	cx.html#now.t,	cx : now(): string	
today	cx.html#today.t,	cx : today(): string	
streamFile	cx.html#streamFile,string,FileMode	cx : streamFile(filename: string; mode: FileMode): FileStream	
uniform	cx.html#uniform,float,float	cx : uniform(a, b: float): float	
`*`	cx.html#*.t,string,int	cx : `*`(s: string; n: int): string	
getRndInt	cx.html#getRndInt,int,int	cx : getRndInt(mi: int = 0; ma: int = int.high): int	
getRndBool	cx.html#getRndBool,	cx : getRndBool(): bool	
colPaletteIndexer	cx.html#colPaletteIndexer.t,seq[string]	cx : colPaletteIndexer(colx: seq[string]): auto	
colPaletteLen	cx.html#colPaletteLen.t,string	cx : colPaletteLen(coltype: string): auto	
colPalette	cx.html#colPalette.t,string,int	cx : colPalette(coltype: string; n: int): auto	
colorsPalette	cx.html#colorsPalette.t,string	cx : colorsPalette(coltype: string): auto	
colPaletteName	cx.html#colPaletteName.t,string,int	cx : colPaletteName(coltype: string; n: int): auto	
aPaletteSample	cx.html#aPaletteSample.t,string	cx : aPaletteSample(coltype: string): int	
randCol2	cx.html#randCol2.t,string	cx : randCol2(coltype: string): auto	
randCol	cx.html#randCol.t,	cx : randCol(): string	
rndCol	cx.html#rndCol.t,int,int,int	cx : rndCol(r: int = getRndInt(0, 254); g: int = getRndInt(0, 254); b: int = getRndInt(0, 254)): string	
randPastelCol	cx.html#randPastelCol.t,	cx : randPastelCol(): string	
`&lt;&gt;`	cx.html#<>.t,untyped,untyped	cx : `&lt;&gt;`(a, b: untyped): untyped	
getTerminalWidth	cx.html#getTerminalWidth,	cx : getTerminalWidth(): int	
tw	cx.html#tw.t,	cx : tw(): int	
getTerminalHeight	cx.html#getTerminalHeight,	cx : getTerminalHeight(): int	
th	cx.html#th.t,	cx : th(): int	
styledEchoPrint	cx.html#styledEchoPrint.m,varargs[untyped]	cx : styledEchoPrint(m: varargs[untyped]): typed	
upperCase	cx.html#upperCase.t,string	cx : upperCase(s: string): string	
lowerCase	cx.html#lowerCase.t,string	cx : lowerCase(s: string): string	
currentLine	cx.html#currentLine.t,	cx : currentLine()	
hdx	cx.html#hdx.t,typed,string,int,int	cx : hdx(code: typed; frm: string = &quot;+&quot;; width: int = tw; nxpos: int = 0): typed	
isBlank	cx.html#isBlank,string	cx : isBlank(val: string): bool	
isEmpty	cx.html#isEmpty,string	cx : isEmpty(val: string): bool	
getRandomSignI	cx.html#getRandomSignI,	cx : getRandomSignI(): int	
getRandomSignF	cx.html#getRandomSignF,	cx : getRandomSignF(): float	
fmtx	cx.html#fmtx,openArray[string],varargs[T,]	cx : fmtx[T](fmts: openArray[string]; fstrings: varargs[T, `$`]): string	
showRune	cx.html#showRune,string	cx : showRune(s: string): string	
unquote	cx.html#unquote,string	cx : unquote(s: string): string	
cleanScreen	cx.html#cleanScreen,	cx : cleanScreen()	
centerX	cx.html#centerX,	cx : centerX(): int	
centerPos	cx.html#centerPos,string	cx : centerPos(astring: string)	
checkColor	cx.html#checkColor,string	cx : checkColor(colname: string): bool	
colconv	cx.html#colconv.c,string	cx : colconv(cx: string): string	
print	cx.html#print,T,string,string,int,bool,bool,set[Style],string	cx : print[T](astring: T; fgr: string = termwhite; bgr: string = bblack; xpos: int = 0;\n         fitLine: bool = false; centered: bool = false; styled: set[Style] = {};\n         substr: string = &quot;&quot;)	
print	cx.html#print,T,string,BackgroundColor,int,bool,bool,set[Style],string	cx : print[T](astring: T; fgr: string = termwhite; bgr: BackgroundColor; xpos: int = 0;\n         fitLine: bool = false; centered: bool = false; styled: set[Style] = {};\n         substr: string = &quot;&quot;)	
print	cx.html#print,varargs[T,],string,string,int,string	cx : print[T](ss: varargs[T, `$`]; fgr: string = termwhite; bgr: string = bblack; xpos: int = 0;\n         sep: string = spaces(1))	
printLn	cx.html#printLn,T,string,string,int,bool,bool,set[Style],string	cx : printLn[T](astring: T; fgr: string = termwhite; bgr: string = bblack; xpos: int = 0;\n           fitLine: bool = false; centered: bool = false; styled: set[Style] = {};\n           substr: string = &quot;&quot;)	
printLn	cx.html#printLn,T,string,BackgroundColor,int,bool,bool,set[Style],string	cx : printLn[T](astring: T; fgr: string = termwhite; bgr: BackgroundColor; xpos: int = 0;\n           fitLine: bool = false; centered: bool = false; styled: set[Style] = {};\n           substr: string = &quot;&quot;)	
printy	cx.html#printy,varargs[T,]	cx : printy[T](astring: varargs[T, `$`])	
rainbow	cx.html#rainbow,T,int,bool,bool	cx : rainbow[T](s: T; xpos: int = 1; fitLine: bool = false; centered: bool = false)	
hline	cx.html#hline,int,string,int,string	cx : hline(n: int = tw; col: string = white; xpos: int = 1; lt: string = &quot;-&quot;)	
hlineLn	cx.html#hlineLn,int,string,int,string	cx : hlineLn(n: int = tw; col: string = white; xpos: int = 1; lt: string = &quot;-&quot;)	
dline	cx.html#dline,int,string,string	cx : dline(n: int = tw; lt: string = &quot;-&quot;; col: string = termwhite)	
dlineLn	cx.html#dlineLn,int,string,string	cx : dlineLn(n: int = tw; lt: string = &quot;-&quot;; col: string = termwhite)	
decho	cx.html#decho,int	cx : decho(z: int = 1)	
curUp	cx.html#curUp.t,int	cx : curUp(x: int = 1)	
curDn	cx.html#curDn.t,int	cx : curDn(x: int = 1)	
curBk	cx.html#curBk.t,int	cx : curBk(x: int = 1)	
curFw	cx.html#curFw.t,int	cx : curFw(x: int = 1)	
curSetx	cx.html#curSetx.t,int	cx : curSetx(x: int)	
curSet	cx.html#curSet.t,int,int	cx : curSet(x: int = 0; y: int = 0)	
clearup	cx.html#clearup.t,int	cx : clearup(x: int = 80)	
curMove	cx.html#curMove,int,int,int,int	cx : curMove(up: int = 0; dn: int = 0; fw: int = 0; bk: int = 0)	
sleepy	cx.html#sleepy,T	cx : sleepy[T: float | int](secs: T)	
printRainbow	cx.html#printRainbow,string,set[Style]	cx : printRainbow(s: string; styled: set[Style] = {})	
printLnRainbow	cx.html#printLnRainbow,T,set[Style]	cx : printLnRainbow[T](s: T; styled: set[Style] = {})	
printBiCol	cx.html#printBiCol,varargs[T,],string,string,string,int,bool,set[Style]	cx : printBiCol[T](s: varargs[T, `$`]; colLeft: string = yellowgreen;\n              colRight: string = termwhite; sep: string = &quot;:&quot;; xpos: int = 0;\n              centered: bool = false; styled: set[Style] = {})	
printLnBiCol	cx.html#printLnBiCol,varargs[T,],string,string,string,int,bool,set[Style]	cx : printLnBiCol[T](s: varargs[T, `$`]; colLeft: string = yellowgreen;\n                colRight: string = termwhite; sep: string = &quot;:&quot;; xpos: int = 0;\n                centered: bool = false; styled: set[Style] = {})	
printHL	cx.html#printHL,string,string,string	cx : printHL(s: string; substr: string; col: string = termwhite)	
printLnHL	cx.html#printLnHL,string,string,string	cx : printLnHL(s: string; substr: string; col: string = lightcyan)	
cecho	cx.html#cecho,string,varargs[string,]	cx : cecho(col: string; ggg: varargs[string, `$`] = @[&quot;&quot;])	
cechoLn	cx.html#cechoLn,string,varargs[string,]	cx : cechoLn(col: string; astring: varargs[string, `$`] = @[&quot;&quot;])	
showColors	cx.html#showColors,	cx : showColors()	
dotColors	cx.html#dotColors.m,	cx : dotColors(): untyped	
doty	cx.html#doty,int,string,string,int	cx : doty(d: int; fgr: string = white; bgr: string = black; xpos: int = 1)	
dotyLn	cx.html#dotyLn,int,string,string,int	cx : dotyLn(d: int; fgr: string = white; bgr: string = black; xpos: int = 1)	
printDotPos	cx.html#printDotPos,int,string,bool	cx : printDotPos(xpos: int; dotCol: string; blink: bool)	
drawRect	cx.html#drawRect,int,int,string,string,string,int,bool	cx : drawRect(h: int = 0; w: int = 3; frhLine: string = &quot;_&quot;; frVLine: string = &quot;|&quot;;\n         frCol: string = darkgreen; dotCol = truetomato; xpos: int = 1; blink: bool = false)	
validdate	cx.html#validdate,string	cx : validdate(adate: string): bool	
day	cx.html#day,string	cx : day(aDate: string): string	
month	cx.html#month,string	cx : month(aDate: string): string	
year	cx.html#year,string	cx : year(aDate: string): string	
intervalsecs	cx.html#intervalsecs,string,string	cx : intervalsecs(startDate, endDate: string): float	
intervalmins	cx.html#intervalmins,string,string	cx : intervalmins(startDate, endDate: string): float	
intervalhours	cx.html#intervalhours,string,string	cx : intervalhours(startDate, endDate: string): float	
intervaldays	cx.html#intervaldays,string,string	cx : intervaldays(startDate, endDate: string): float	
intervalweeks	cx.html#intervalweeks,string,string	cx : intervalweeks(startDate, endDate: string): float	
intervalmonths	cx.html#intervalmonths,string,string	cx : intervalmonths(startDate, endDate: string): float	
intervalyears	cx.html#intervalyears,string,string	cx : intervalyears(startDate, endDate: string): float	
compareDates	cx.html#compareDates,string,string	cx : compareDates(startDate, endDate: string): int	
plusDays	cx.html#plusDays,string,int	cx : plusDays(aDate: string; days: int): string	
minusDays	cx.html#minusDays,string,int	cx : minusDays(aDate: string; days: int): string	
getFirstMondayYear	cx.html#getFirstMondayYear,string	cx : getFirstMondayYear(ayear: string): string	
getFirstMondayYearMonth	cx.html#getFirstMondayYearMonth,string	cx : getFirstMondayYearMonth(aym: string): string	
getNextMonday	cx.html#getNextMonday,string	cx : getNextMonday(adate: string): string	
createSeqDate	cx.html#createSeqDate,string,string	cx : createSeqDate(fromDate: string; toDate: string): seq[string]	
dayofweek	cx.html#dayofweek,string	cx : dayofweek(datestr: string): string	
cxTimeZone	cx.html#cxTimeZone,string	cx : cxTimeZone(amode: string = &quot;long&quot;): string	
createSeqDate	cx.html#createSeqDate,string,int	cx : createSeqDate(fromDate: string; days: int = 1): seq[string]	
getRndDate	cx.html#getRndDate,int,int	cx : getRndDate(minyear: int = parseInt(year(getDateStr())) - 50;\n           maxyear: int = parseInt(year(getDateStr())) + 50): string	
printSlimNumber	cx.html#printSlimNumber,string,string,string,int	cx : printSlimNumber(anumber: string; fgr: string = yellowgreen; bgr: string = black;\n                xpos: int = 1)	
printSlim	cx.html#printSlim,string,string,string,int,string	cx : printSlim(ss: string = &quot;&quot;; frg: string = termwhite; bgr: string = termblack; xpos: int = 0;\n          align: string = &quot;left&quot;)	
superHeader	cx.html#superHeader,string	cx : superHeader(bstring: string)	
superHeader	cx.html#superHeader,string,string,string	cx : superHeader(bstring: string; strcol: string; frmcol: string)	
tupleToStr	cx.html#tupleToStr,	cx : tupleToStr(xs: tuple): string	
getIpInfo	cx.html#getIpInfo,string	cx : getIpInfo(ip: string): JsonNode	
showIpInfo	cx.html#showIpInfo,string	cx : showIpInfo(ip: string)	
localIp	cx.html#localIp,	cx : localIp(): string	
localRouterIp	cx.html#localRouterIp,	cx : localRouterIp(): string	
showLocalIpInfo	cx.html#showLocalIpInfo,	cx : showLocalIpInfo()	
getHosts	cx.html#getHosts,string	cx : getHosts(dm: string): seq[string]	
showHosts	cx.html#showHosts,string	cx : showHosts(dm: string)	
pingy	cx.html#pingy,string,int,string	cx : pingy(dest: string; pingcc: int = 3; col: string = termwhite)	
quickList	cx.html#quickList.t,int,T,int,int	cx : quickList[T](c: int; d: T; cw: int = 7; dw: int = 15)	
doSomething	cx.html#doSomething.t,int,untyped	cx : doSomething(secs: int; body: untyped)	
reverseMe	cx.html#reverseMe,openArray[T]	cx : reverseMe[T](xs: openArray[T]): seq[T]	
reverseText	cx.html#reverseText,string	cx : reverseText(text: string): string	
reverseString	cx.html#reverseString,string	cx : reverseString(text: string): string	
createSeqBool	cx.html#createSeqBool,int	cx : createSeqBool(n: int = 10): seq[bool]	
createSeqInt	cx.html#createSeqInt,int,int,int	cx : createSeqInt(n: int = 10; mi: int = 0; ma: int = 1000): seq[int]	
sum	cx.html#sum,seq[T]	cx : sum[T](aseq: seq[T]): T	
product	cx.html#product,seq[T]	cx : product[T](aseq: seq[T]): T	
ff	cx.html#ff,float,int	cx : ff(zz: float; n: int = 5): string	
ff2	cx.html#ff2,float,int	cx : ff2(zz: float; n: int = 3): string	
ff2	cx.html#ff2,int64,int	cx : ff2(zz: int64; n: int = 0): string	
getRandomFloat	cx.html#getRandomFloat,float,float	cx : getRandomFloat(mi: float = -1.0; ma: float = 1.0): float	
getRndFloat	cx.html#getRndFloat,float,float	cx : getRndFloat(mi: float = -1.0; ma: float = 1.0): float	
createSeqFloat	cx.html#createSeqFloat,int,int	cx : createSeqFloat(n: int = 10; prec: int = 3): seq[float]	
seqLeft	cx.html#seqLeft,seq[T],int	cx : seqLeft[T](it: seq[T]; n: int): seq[T]	
seqRight	cx.html#seqRight,seq[T],int	cx : seqRight[T](it: seq[T]; n: int): seq[T]	
seqHighLite	cx.html#seqHighLite,seq[T],seq[T],string	cx : seqHighLite[T](b: seq[T]; b1: seq[T]; col: string = gold)	
bitCheck	cx.html#bitCheck.t,untyped,untyped	cx : bitCheck(a, b: untyped): bool	
nimcat	cx.html#nimcat,string,varargs[string,]	cx : nimcat(curFile: string; countphrase: varargs[string, `$`] = &quot;&quot;)	
checkHash	cx.html#checkHash,string,T	cx : checkHash[T](kata: string; hsx: T)	
verifyHash	cx.html#verifyHash,string,T	cx : verifyHash[T](kata: string; hsx: T): bool	
createHash	cx.html#createHash,string	cx : createHash(kata: string): auto	
benchmark	cx.html#benchmark.t,string,int,typed	cx : benchmark(benchmarkName: string; repeatcount: int = 1; code: typed)	
benchmark	cx.html#benchmark.t,string,typed	cx : benchmark(benchmarkName: string; code: typed)	
showBench	cx.html#showBench,	cx : showBench()	
newCxtimer	cx.html#newCxtimer,string	cx : newCxtimer(aname: string = &quot;cxtimer&quot;): ref (CxTimer)	
startTimer	cx.html#startTimer,ref.	cx : startTimer(co: ref (CxTimer))	
lapTimer	cx.html#lapTimer,ref.	cx : lapTimer(co: ref (CxTimer)): auto	
stopTimer	cx.html#stopTimer,ref.	cx : stopTimer(co: ref (CxTimer))	
resetTimer	cx.html#resetTimer,ref.	cx : resetTimer(co: ref (CxTimer))	
duration	cx.html#duration,ref.	cx : duration(co: ref (CxTimer)): float	
saveTimerResults	cx.html#saveTimerResults,ref.	cx : saveTimerResults(b: ref (CxTimer))	
showTimerResults	cx.html#showTimerResults,string	cx : showTimerResults(aname: string)	
showTimerResults	cx.html#showTimerResults,	cx : showTimerResults()	
clearTimerResults	cx.html#clearTimerResults,string,bool,int	cx : clearTimerResults(aname: string = &quot;&quot;; quiet: bool = true; xpos: int = 3)	
clearAllTimerResults	cx.html#clearAllTimerResults,bool,int	cx : clearAllTimerResults(quiet: bool = true; xpos: int = 3)	
`$`	cx.html#$,typedesc[T]	cx : `$`[T](some: typedesc[T]): string	
typeTest	cx.html#typeTest,T	cx : typeTest[T](x: T): T	
typeTest2	cx.html#typeTest2,T	cx : typeTest2[T](x: T): T	
typeTest3	cx.html#typeTest3,T	cx : typeTest3[T](x: T): string	
echoType	cx.html#echoType.m,typed	cx : echoType(x: typed): untyped	
withFile	cx.html#withFile.t,untyped,untyped,untyped,untyped	cx : withFile(f, fn, mode, actions: untyped): untyped	
pswwaux	cx.html#pswwaux,	cx : pswwaux()	
fromCString	cx.html#fromCString,pointer,int	cx : fromCString(p: pointer; len: int): string	
showPalette	cx.html#showPalette,string	cx : showPalette(coltype: string = &quot;white&quot;)	
colorio	cx.html#colorio,	cx : colorio()	
shift	cx.html#shift,seq[T],Natural	cx : shift[T](x: var seq[T]; zz: Natural = 0): T	
spellInteger	cx.html#spellInteger,int64	cx : spellInteger(n: int64): string	
spellInteger2	cx.html#spellInteger2,string	cx : spellInteger2(n: string): string	
spellFloat	cx.html#spellFloat,float64,bool,string,string	cx : spellFloat(n: float64; currency: bool = false; sep: string = &quot;.&quot;;\n           sepname: string = &quot; dot &quot;): string	
showStats	cx.html#showStats,RunningStat,int,int	cx : showStats(x: RunningStat; n: int = 3; xpos: int = 1)	
showRegression	cx.html#showRegression,seq[],seq[],int,int	cx : showRegression(x, y: seq[float | int]; n: int = 5; xpos: int = 1)	
showRegression	cx.html#showRegression,RunningRegress,int,int	cx : showRegression(rr: RunningRegress; n: int = 5; xpos: int = 1)	
currentFile	cx.html#currentFile.t,	cx : currentFile(): string	
debug	cx.html#debug.m,varargs[typed]	cx : debug(n: varargs[typed]): untyped	
dprint	cx.html#dprint,T	cx : dprint[T](s: T)	
zipWith	cx.html#zipWith.t,untyped,openArray[T1],openArray[T2]	cx : zipWith[T1; T2](f: untyped; xs: openArray[T1]; ys: openArray[T2]): untyped	
newDir	cx.html#newDir,string	cx : newDir(dirname: string)	
remDir	cx.html#remDir,string	cx : remDir(dirname: string)	
localTime	cx.html#localTime,	cx : localTime(): auto	
dayOfYear	cx.html#dayOfYear,	cx : dayOfYear(): range[0 .. 365]	
dayOfYear	cx.html#dayOfYear,Time	cx : dayOfYear(tt: Time): range[0 .. 365]	
toTimeInfo	cx.html#toTimeInfo,string	cx : toTimeInfo(date: string = &quot;2000-01-01&quot;): TimeInfo	
epochSecs	cx.html#epochSecs,string	cx : epochSecs(date: string = &quot;2000-01-01&quot;): int	
checkClip	cx.html#checkClip,string	cx : checkClip(sel: string = &quot;primary&quot;): string	
toClip	cx.html#toClip,T	cx : toClip[T](s: T)	
tableRune	cx.html#tableRune,seq[T],string,int,int	cx : tableRune[T](z: seq[T]; fgr: string = truetomato; cols = 6; maxitemwidth: int = 5)	
showSeq	cx.html#showSeq,seq[T],string,int,int	cx : showSeq[T](aseq: seq[T]; fgr: string = truetomato; cols = 6; maxitemwidth: int = 5)	
uniall	cx.html#uniall,bool	cx : uniall(showOrd: bool = true): seq[string]	
geoshapes	cx.html#geoshapes,	cx : geoshapes(): seq[string]	
hiragana	cx.html#hiragana,	cx : hiragana(): seq[string]	
katakana	cx.html#katakana,	cx : katakana(): seq[string]	
cjk	cx.html#cjk,	cx : cjk(): seq[string]	
iching	cx.html#iching,	cx : iching(): seq[string]	
apl	cx.html#apl,	cx : apl(): seq[string]	
rainbow2	cx.html#rainbow2,T,int,bool,bool,seq[]	cx : rainbow2[T](s: T; xpos: int = 1; fitLine: bool = false; centered: bool = false;\n            colorset: seq[(string, string)] = colorNames)	
getColorName	cx.html#getColorName,T	cx : getColorName[T](sc: T): string	
getColorConst	cx.html#getColorConst,T	cx : getColorConst[T](sc: T): string	
boxChars	cx.html#boxChars,	cx : boxChars(): seq[string]	
optimalbox	cx.html#optimalbox,int,int,int	cx : optimalbox(w: int; s: int; tl: int): int	
drawBox	cx.html#drawBox,int,int,int,int,string,string,string,int,bool	cx : drawBox(hy: int = 1; wx: int = 1; hsec: int = 1; vsec: int = 1; frCol: string = yellowgreen;\n        brCol: string = black; cornerCol: string = truetomato; xpos: int = 1;\n        blink: bool = false)	
randpos	cx.html#randpos,	cx : randpos(): int	
fastsplit	cx.html#fastsplit,string,char	cx : fastsplit(s: string; sep: char): seq[string]	
splitty	cx.html#splitty,string,string	cx : splitty(txt: string; sep: string): seq[string]	
doFlag	cx.html#doFlag,string,int,T,string	cx : doFlag[T](flagcol: string = yellowgreen; flags: int = 1; text: T = &quot;&quot;;\n          textcol: string = termwhite): string	
showTerminalSize	cx.html#showTerminalSize,	cx : showTerminalSize()	
infoProc	cx.html#infoProc.t,untyped	cx : infoProc(code: untyped)	
checkLocals	cx.html#checkLocals.t,	cx : checkLocals()	
qqTop	cx.html#qqTop,	cx : qqTop()	
cxZero	cx.html#cxZero.t,int,string,string	cx : cxZero(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx1	cx.html#cx1.t,int,string,string	cx : cx1(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx2	cx.html#cx2.t,int,string,string	cx : cx2(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx3	cx.html#cx3.t,int,string,string	cx : cx3(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx4	cx.html#cx4.t,int,string,string	cx : cx4(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx5	cx.html#cx5.t,int,string,string	cx : cx5(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx6	cx.html#cx6.t,int,string,string	cx : cx6(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx7	cx.html#cx7.t,int,string,string	cx : cx7(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx8	cx.html#cx8.t,int,string,string	cx : cx8(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx9	cx.html#cx9.t,int,string,string	cx : cx9(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cx10	cx.html#cx10,int,string,string	cx : cx10(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxa	cx.html#cxa.t,int,string,string	cx : cxa(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxb	cx.html#cxb.t,int,string,string	cx : cxb(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxc	cx.html#cxc.t,int,string,string	cx : cxc(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxd	cx.html#cxd.t,int,string,string	cx : cxd(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxe	cx.html#cxe.t,int,string,string	cx : cxe(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxf	cx.html#cxf.t,int,string,string	cx : cxf(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxg	cx.html#cxg.t,int,string,string	cx : cxg(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxh	cx.html#cxh.t,int,string,string	cx : cxh(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxi	cx.html#cxi.t,int,string,string	cx : cxi(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxj	cx.html#cxj.t,int,string,string	cx : cxj(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxk	cx.html#cxk.t,int,string,string	cx : cxk(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxl	cx.html#cxl.t,int,string,string	cx : cxl(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxm	cx.html#cxm.t,int,string,string	cx : cxm(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxn	cx.html#cxn.t,int,string,string	cx : cxn(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxo	cx.html#cxo.t,int,string,string	cx : cxo(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxp	cx.html#cxp.t,int,string,string	cx : cxp(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxq	cx.html#cxq.t,int,string,string	cx : cxq(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxr	cx.html#cxr.t,int,string,string	cx : cxr(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxs	cx.html#cxs.t,int,string,string	cx : cxs(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxt	cx.html#cxt.t,int,string,string	cx : cxt(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxu	cx.html#cxu.t,int,string,string	cx : cxu(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxv	cx.html#cxv.t,int,string,string	cx : cxv(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxw	cx.html#cxw.t,int,string,string	cx : cxw(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxx	cx.html#cxx.t,int,string,string	cx : cxx(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxy	cx.html#cxy.t,int,string,string	cx : cxy(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxz	cx.html#cxz.t,int,string,string	cx : cxz(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxpoint	cx.html#cxpoint.t,int,string,string	cx : cxpoint(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxhyphen	cx.html#cxhyphen.t,int,string,string	cx : cxhyphen(npos: int = 0; col: string = randcol(); coltop: string = randcol())	
cxgrid	cx.html#cxgrid.t,int,string,string	cx : cxgrid(npos: int = 0; col: string = randcol(); coltop: string = lime)	
printFont	cx.html#printFont,string,string,string,int	cx : printFont(s: string; col: string = randcol(); coltop: string = randcol(); xpos: int = -10)	
printFontFancy	cx.html#printFontFancy,string,int	cx : printFontFancy(s: string; coltop = rndcol(); xpos: int = -10)	
printNimCx	cx.html#printNimCx,int	cx : printNimCx(npos: int = getTerminalWidth() div 2 - 30)	
printMadeWithNim	cx.html#printMadeWithNim,int	cx : printMadeWithNim(npos: int = getTerminalWidth() div 2 - 60)	
doInfo	cx.html#doInfo,	cx : doInfo()	
infoLine	cx.html#infoLine,	cx : infoLine()	
doByeBye	cx.html#doByeBye,	cx : doByeBye()	
uname	cx.html#uname.t,	cx : uname(): untyped	
release	cx.html#release.t,	cx : release(): untyped	
theEnd	cx.html#theEnd,	cx : theEnd()	
doFinish	cx.html#doFinish,	cx : doFinish()	
handler	cx.html#handler,	cx : handler()	
doCxEnd	cx.html#doCxEnd,	cx : doCxEnd()	
